{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport { useState } from 'react';\nimport { Box, Heading, Center, Input, IconButton, Icon, HStack, VStack, Checkbox, Text } from 'native-base';\nimport { Ionicons, Entypo } from \"@expo/vector-icons\";\nimport AddButton from \"./AddButton\";\nimport TaskInput from \"./TaskInput\";\nexport default function AddTaskBox() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      list = _useState4[0],\n      setList = _useState4[1];\n\n  var addTask = function addTask(task) {\n    setList([].concat(_toConsumableArray(list), [{\n      task: task,\n      isComplited: false\n    }]));\n  };\n\n  return React.createElement(Box, {\n    width: \"100%\"\n  }, React.createElement(Center, {\n    flex: 1,\n    px: \"3\"\n  }, React.createElement(Heading, {\n    mb: \"5\",\n    color: \"orange.500\"\n  }, \"To do List\"), React.createElement(VStack, {\n    space: 4\n  }, React.createElement(HStack, {\n    space: 3\n  }, React.createElement(Input, {\n    flex: 2,\n    color: \"orange.500\",\n    borderColor: \"orange.500\",\n    _focus: {\n      borderColor: \"orange.600:alpha.20\"\n    },\n    onChangeText: function onChangeText(v) {\n      return setInputValue(v);\n    },\n    value: inputValue,\n    placeholder: \"Add Task\"\n  }), React.createElement(IconButton, {\n    onPress: function onPress() {\n      addTask(inputValue);\n      setInputValue(\"\");\n    },\n    icon: React.createElement(Icon, {\n      as: Ionicons,\n      name: \"ios-add-circle\"\n    }),\n    borderRadius: \"full\",\n    _icon: {\n      color: \"orange.500\",\n      size: \"md\"\n    },\n    _hover: {\n      bg: \"orange.600:alpha.20\"\n    },\n    _pressed: {\n      bg: \"orange.600:alpha.20\",\n      _icon: {\n        name: \"ios-add-circle\"\n      },\n      _ios: {\n        _icon: {\n          size: \"3xl\"\n        }\n      }\n    },\n    _ios: {\n      _icon: {\n        size: \"3xl\"\n      }\n    }\n  })), list.map(function (item, itemI) {\n    return React.createElement(HStack, {\n      space: 5,\n      key: item.task + itemI.toString()\n    }, React.createElement(Checkbox, null, React.createElement(Text, {\n      mx: 3\n    }, item.task, \"strikeThrough=\", item.isComplited)));\n  }))));\n}","map":{"version":3,"sources":["/Users/yaroslava/Documents/code/react-native-practice/components/AddTaskBox.jsx"],"names":["React","useState","Box","Heading","Center","Input","IconButton","Icon","HStack","VStack","Checkbox","Text","Ionicons","Entypo","AddButton","TaskInput","AddTaskBox","inputValue","setInputValue","list","setList","addTask","task","isComplited","borderColor","v","color","size","bg","_icon","name","_ios","map","item","itemI","toString"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { Box, Heading, Center, Input, IconButton, Icon, HStack, VStack, Checkbox, Text } from 'native-base';\nimport { Ionicons, Entypo } from \"@expo/vector-icons\"\n\nimport AddButton from './AddButton';\nimport TaskInput from './TaskInput';\n\nexport default function AddTaskBox() {\n  const [inputValue, setInputValue] = useState(\"\")\n  const [list, setList] = useState([])\n\n  const addTask = (task) => {\n    setList([\n      ...list, \n      {\n        task,\n        isComplited: false\n      },\n    ])\n  }\n    return (\n    <Box width=\"100%\">\n      <Center flex={1} px=\"3\">\n        <Heading mb=\"5\" color=\"orange.500\">To do List</Heading>\n        <VStack space={4}>\n          <HStack space={3}>\n            <Input \n              flex={2}\n              color=\"orange.500\"\n              borderColor=\"orange.500\"\n              _focus={{\n                borderColor: \"orange.600:alpha.20\",\n              }}\n              onChangeText={(v) => setInputValue(v)}\n              value={inputValue}\n              placeholder=\"Add Task\"\n            />\n            <IconButton\n              onPress={() => {\n                addTask(inputValue)\n                setInputValue(\"\")\n              }}\n              icon={<Icon as={Ionicons} name=\"ios-add-circle\" />}\n              borderRadius=\"full\"\n              _icon={{\n                color: \"orange.500\",\n                size: \"md\",\n              }}\n              _hover={{\n                bg: \"orange.600:alpha.20\",\n              }}\n              _pressed={{\n                bg: \"orange.600:alpha.20\",\n                _icon: {\n                  name: \"ios-add-circle\",\n                },\n                _ios: {\n                  _icon: {\n                    size: \"3xl\",\n                  },\n                },\n              }}\n              _ios={{\n                _icon: {\n                  size: \"3xl\",\n                },\n              }}\n            />\n\n\n          </HStack>\n\n          {list.map((item, itemI) => (\n            <HStack \n              space={5}\n              key={item.task + itemI.toString()}\n            >\n              <Checkbox>\n                <Text \n                  mx={3}>{item.task}\n                  strikeThrough={item.isComplited}\n                </Text>\n              </Checkbox>\n            </HStack>\n          ))}\n        </VStack>\n\n        \n      </Center>\n    </Box>\n    );\n}"]},"metadata":{},"sourceType":"module"}