{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { Box, Heading, Center, Input, IconButton, Icon, HStack, VStack, Checkbox, Text } from 'native-base';\nimport { Ionicons, MaterialCommunityIcons } from \"@expo/vector-icons\";\nexport default function AddTaskBox() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      list = _useState4[0],\n      setList = _useState4[1];\n\n  var addTask = function addTask(task) {\n    setList([].concat(_toConsumableArray(list), [{\n      task: task,\n      isCompleted: false\n    }]));\n  };\n\n  var handleDelete = function handleDelete(index) {\n    var temp = list.filter(function (_, itemI) {\n      return itemI !== index;\n    });\n    setList(temp);\n  };\n\n  var handleStatusChange = function handleStatusChange(index) {\n    var temp = list.map(function (item, itemI) {\n      return itemI !== index ? item : _objectSpread(_objectSpread({}, item), {}, {\n        isCompleted: !item.isCompleted\n      });\n    });\n    setList(temp);\n  };\n\n  return React.createElement(Center, {\n    p: 10,\n    flex: 1\n  }, React.createElement(Box, {\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n  }, React.createElement(Heading, {\n    mb: \"5\",\n    color: \"orange.500\"\n  }, \"To do List\"), React.createElement(VStack, {\n    space: 4,\n    width: \"70%\"\n  }, React.createElement(HStack, {\n    space: 3,\n    justifyContent: \"space-between\"\n  }, React.createElement(Input, {\n    maxWidth: \"70%\",\n    fontSize: 15,\n    color: \"orange.500\",\n    borderColor: \"orange.500\",\n    _focus: {\n      borderColor: \"orange.600:alpha.20\"\n    },\n    onChangeText: function onChangeText(v) {\n      return setInputValue(v);\n    },\n    value: inputValue,\n    placeholder: \"Add Task\"\n  }), React.createElement(IconButton, {\n    onPress: function onPress() {\n      addTask(inputValue);\n      setInputValue(\"\");\n    },\n    icon: React.createElement(Icon, {\n      as: Ionicons,\n      name: \"ios-add-circle\"\n    }),\n    borderRadius: \"full\",\n    _icon: {\n      color: \"orange.500\",\n      size: \"md\"\n    },\n    _hover: {\n      bg: \"orange.600:alpha.20\"\n    },\n    _pressed: {\n      bg: \"orange.600:alpha.20\",\n      _icon: {\n        name: \"ios-add-circle\"\n      },\n      _ios: {\n        _icon: {\n          size: \"3xl\"\n        }\n      }\n    },\n    _ios: {\n      _icon: {\n        size: \"3xl\"\n      }\n    }\n  })), list.map(function (item, itemI) {\n    return React.createElement(HStack, {\n      w: \"100%\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      space: 5,\n      key: item.task + itemI.toString()\n    }, React.createElement(Checkbox, {\n      w: \"100%\",\n      colorScheme: \"orange\",\n      borderColor: \"orange.500:alpha.20\",\n      isChecked: item.isCompleted,\n      onChange: function onChange() {\n        return handleStatusChange(itemI);\n      },\n      value: item.task,\n      icon: React.createElement(Icon, {\n        as: React.createElement(Ionicons, {\n          name: \"md-checkmark-done\"\n        })\n      }),\n      _hover: {\n        borderColor: \"orange.500\"\n      },\n      _focus: {\n        borderColor: \"orange.500\"\n      }\n    }, React.createElement(Text, {\n      mx: 3,\n      fontStyle: \"italic\",\n      fontSize: 15,\n      strikeThrough: item.isCompleted,\n      _light: {\n        color: item.isCompleted ? \"orange.600:alpha.30\" : \"orange.500\"\n      }\n    }, item.task)), React.createElement(IconButton, {\n      size: \"sm\",\n      colorScheme: \"orange\",\n      color: \"orange.500\",\n      icon: React.createElement(Icon, {\n        as: MaterialCommunityIcons,\n        name: \"delete\",\n        size: \"lg\",\n        color: \"orange.500\",\n        _hover: {\n          bg: \"orange.600:alpha.20\"\n        },\n        _focus: {\n          bg: \"orange.600:alpha.20\"\n        }\n      }),\n      onPress: function onPress() {\n        return handleDelete(itemI);\n      }\n    }));\n  }))));\n}","map":{"version":3,"sources":["/Users/yaroslava/Documents/code/react-native-practice/components/AddTaskBox.jsx"],"names":["React","useState","Box","Heading","Center","Input","IconButton","Icon","HStack","VStack","Checkbox","Text","Ionicons","MaterialCommunityIcons","AddTaskBox","inputValue","setInputValue","list","setList","addTask","task","isCompleted","handleDelete","index","temp","filter","_","itemI","handleStatusChange","map","item","borderColor","v","color","size","bg","_icon","name","_ios","toString"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { Box, Heading, Center, Input, IconButton, Icon, HStack, VStack, Checkbox, Text } from 'native-base';\nimport { Ionicons, MaterialCommunityIcons } from \"@expo/vector-icons\"\n\nexport default function AddTaskBox() {\n  const [inputValue, setInputValue] = useState(\"\")\n  const [list, setList] = useState([])\n\n  const addTask = (task) => {\n    setList([\n      ...list, \n      {\n        task,\n        isCompleted: false\n      },\n    ])\n  }\n\n  const handleDelete = (index) => {\n    const temp = list.filter((_, itemI) => itemI !== index)\n    setList(temp)\n  }\n\n  const handleStatusChange = (index) => {\n    const temp = list.map((item, itemI) =>\n      itemI !== index ? item : { ...item, isCompleted: !item.isCompleted }\n    )\n    setList(temp)\n  }\n\n    return (\n      <Center p={10} flex={1}>\n        <Box  \n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n        >\n          <Heading mb=\"5\" color=\"orange.500\">To do List</Heading>\n          <VStack space={4} width=\"70%\">\n            <HStack space={3} justifyContent=\"space-between\">\n              <Input \n                maxWidth=\"70%\"\n                fontSize={15}\n                color=\"orange.500\"\n                borderColor=\"orange.500\"\n                _focus={{\n                  borderColor: \"orange.600:alpha.20\",\n                }}\n                onChangeText={(v) => setInputValue(v)}\n                value={inputValue}\n                placeholder=\"Add Task\"\n              />\n              <IconButton\n                onPress={() => {\n                  addTask(inputValue)\n                  setInputValue(\"\")\n                }}\n                icon={<Icon as={Ionicons} name=\"ios-add-circle\" />}\n                borderRadius=\"full\"\n                _icon={{\n                  color: \"orange.500\",\n                  size: \"md\",\n                }}\n                _hover={{\n                  bg: \"orange.600:alpha.20\",\n                }}\n                _pressed={{\n                  bg: \"orange.600:alpha.20\",\n                  _icon: {\n                    name: \"ios-add-circle\",\n                  },\n                  _ios: {\n                    _icon: {\n                      size: \"3xl\",\n                    },\n                  },\n                }}\n                _ios={{\n                  _icon: {\n                    size: \"3xl\",\n                  },\n                }}\n              />\n            </HStack>\n\n            {list.map((item, itemI) => (\n              <HStack \n                w=\"100%\"\n                justifyContent=\"space-between\"\n                alignItems=\"center\"\n                space={5}\n                key={item.task + itemI.toString()}\n              >\n              <Checkbox\n                // whiteSpace=\"normal\"\n                w=\"100%\"\n                colorScheme=\"orange\"\n                borderColor=\"orange.500:alpha.20\"\n                isChecked={item.isCompleted}\n                onChange={() => handleStatusChange(itemI)}\n                value={item.task}\n                icon={<Icon as={<Ionicons name=\"md-checkmark-done\" />} />}\n                _hover={{\n                  borderColor: \"orange.500\"\n                }}\n                _focus={{\n                  borderColor: \"orange.500\"\n                }}\n              >\n                <Text\n                  mx={3}\n                  fontStyle=\"italic\"\n                  fontSize={15}\n                  strikeThrough={item.isCompleted}\n                  _light={{\n                    color: item.isCompleted ? \"orange.600:alpha.30\" : \"orange.500\",\n                  }}\n                >\n                  {item.task}\n                </Text>\n              </Checkbox>\n              <IconButton\n                size=\"sm\"\n                colorScheme=\"orange\"\n                color=\"orange.500\"\n                icon={\n                  <Icon\n                    as={MaterialCommunityIcons}\n                    name=\"delete\"\n                    size=\"lg\"\n                    color=\"orange.500\"\n                    _hover={{\n                      bg: \"orange.600:alpha.20\"\n                    }}\n                    _focus={{\n                      bg: \"orange.600:alpha.20\",\n                    }}\n                  />\n                  \n                }\n                onPress={() => handleDelete(itemI)}\n              />\n            </HStack>\n          ))}\n\n          </VStack>\n        </Box>\n      </Center>\n    );\n}"]},"metadata":{},"sourceType":"module"}